{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.39.0",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://github.com/case-contract-testing/contract-case/tree/main/packages/case-example-mock-types",
  "kind": "Package",
  "canonicalReference": "@contract-case/case-example-mock-types!",
  "docComment": "",
  "name": "@contract-case/case-example-mock-types",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@contract-case/case-example-mock-types!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "Namespace",
          "canonicalReference": "@contract-case/case-example-mock-types!base:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index-api-extractor.ts",
          "releaseTag": "None",
          "name": "base",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/case-example-mock-types!base.AnyMockDescriptor:class",
              "docComment": "/**\n * The base class for all ContractCase Mock Descriptors. Extend this if you are implementing your own mock type.\n *\n * If you are using the included example types from ContractCase (or any extension libraries), you do not need to read the documentation for this class.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare abstract class AnyMockDescriptor "
                }
              ],
              "fileUrlPath": "src/mocks/base/AnyMockDescriptor.ts",
              "releaseTag": "Public",
              "isAbstract": true,
              "name": "AnyMockDescriptor",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/case-example-mock-types!base.AnyMockDescriptor:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `AnyMockDescriptor` class\n *\n * @param mockType - The type string for this mock description (see [Extending ContractCase](https://case.contract-testing.io/docs/advanced-topics/extending-case) for a description of these strings).\n *\n * Mock description type strings beginning with `_case:` are reserved for the default ContractCase matchers. Only use a types prefixed with `_case:` if you wish to create a DSL for a special case for a matching behaviour that is already provided by a core ContractCase mock.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(mockType: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ", setup: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ContractCaseCoreSetup",
                      "canonicalReference": "@contract-case/case-example-mock-types!base.ContractCaseCoreSetup:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "mockType",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "setup",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/case-example-mock-types!base.AnyMockDescriptor#stringify:member(1)",
                  "docComment": "/**\n * This method returns the entire example as a JSON string, as a convenience so that wrapper libraries don't need to figure out how to walk a tree of example objects.\n *\n * You shouldn't need to override this method.\n *\n * @returns A JSON string representation of this mock.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "stringify(): "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "stringify"
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/case-example-mock-types!base.AnyMockDescriptor#toJSON:member(1)",
                  "docComment": "/**\n * Only override this method if you are writing a matcher in a language other than TypeScript.\n *\n * It exists because the ContractCase matcher format is not legal in all languages that ContractCase supports.\n *\n * It isn't called by any implementation directly, it's used on the javascript side by `JSON.stringify()`.\n *\n * Calling it from a wrapper library will return unhelpful results, as JSii can't map all objects that it returns.\n *\n * WARNING: Do not return a string from this method. You must instead return an object that can be serialised to JSON following the matcher format described in [Extending ContractCase](https://case.contract-testing.io/docs/advanced-topics/extending-case).\n *\n * @returns An object in the matcher format described [in the Extending ContractCase documentation](https://case.contract-testing.io/docs/advanced-topics/extending-case).\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "implementsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@contract-case/case-example-mock-types!base.ContractCaseCoreBehaviour:interface",
              "docComment": "/**\n * This type defines the core behaviour that ContractCase has with this mock.\n *\n * If you are using the included example types from ContractCase (or any extension libraries), you do not need to use this class (or understand this documentation).\n *\n * This documentation is only necessary for people extending ContractCase to include new mock types.\n *\n * See the definitions in the case-entities-internal package for more details.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface ContractCaseCoreBehaviour "
                }
              ],
              "fileUrlPath": "src/mocks/base/AnyMockDescriptor.ts",
              "releaseTag": "Public",
              "name": "ContractCaseCoreBehaviour",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/case-example-mock-types!base.ContractCaseCoreBehaviour#mockType:member",
                  "docComment": "/**\n * The type of this mock. Usually this is inverted on read vs write, for example, a written MOCK_HTTP_CLIENT might become a MOCK_HTTP_SERVER during reading.\n *\n * This will almost always be the same as the top level type for your mock during read - but if it is different, ContractCase will respect this value.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly mockType: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "mockType",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/case-example-mock-types!base.ContractCaseCoreBehaviour#stateVariables:member",
                  "docComment": "/**\n * Whether or not this mock mode will invoke state handlers. If set to `\"default\"` then ContractCase will not invoke or require the state handlers and will use the default values for all state variables. If set to `\"state\"`, then ContractCase will invoke the state handlers and require the expected variables to be returned.\n *\n * All other values are errors.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly stateVariables: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "stateVariables",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/case-example-mock-types!base.ContractCaseCoreBehaviour#triggers:member",
                  "docComment": "/**\n * Whether or not this mock mode needs to be triggered by user-provided code. If `\"provided\"` then ContractCase will require the user to provide a trigger and a test function (eg, for testing an HTTP Client, code that will invoke it must be provided). If `\"generated\"`, then ContractCase will not require user provided triggers as it will generate them (eg, if the system under test is an HTTP server, ContractCase will generate client calls).\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly triggers: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "triggers",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@contract-case/case-example-mock-types!base.ContractCaseCoreSetup:interface",
              "docComment": "/**\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface ContractCaseCoreSetup "
                }
              ],
              "fileUrlPath": "src/mocks/base/AnyMockDescriptor.ts",
              "releaseTag": "Public",
              "name": "ContractCaseCoreSetup",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/case-example-mock-types!base.ContractCaseCoreSetup#read:member",
                  "docComment": "/**\n * Defines how the ContractCase core will behave when reading (ie, verifying) a Example of this type.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly read: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ContractCaseCoreBehaviour",
                      "canonicalReference": "@contract-case/case-example-mock-types!base.ContractCaseCoreBehaviour:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "read",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/case-example-mock-types!base.ContractCaseCoreSetup#write:member",
                  "docComment": "/**\n * Defines how the ContractCase core will behave when writing (ie, defining) an Example of this type.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly write: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ContractCaseCoreBehaviour",
                      "canonicalReference": "@contract-case/case-example-mock-types!base.ContractCaseCoreBehaviour:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "write",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@contract-case/case-example-mock-types!http:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index-api-extractor.ts",
          "releaseTag": "None",
          "name": "http",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Interface",
              "canonicalReference": "@contract-case/case-example-mock-types!http.HttpExample:interface",
              "docComment": "/**\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface HttpExample "
                }
              ],
              "fileUrlPath": "src/mocks/http/types.ts",
              "releaseTag": "Public",
              "name": "HttpExample",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/case-example-mock-types!http.HttpExample#request:member",
                  "docComment": "/**\n * A test equivalence matcher that will match an HTTP request (recommended: the Test Equivalence Matcher `HttpRequest`)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly request: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "request",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/case-example-mock-types!http.HttpExample#response:member",
                  "docComment": "/**\n * A test equivalence matcher that will match an HTTP response (recommended: the Test Equivalence Matcher `HttpResponse`)\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly response: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "response",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/case-example-mock-types!http.WillReceiveHttpRequest:class",
              "docComment": "/**\n * Defines an example that expects to receive an HTTP request. Use this to test HTTP clients.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class WillReceiveHttpRequest extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMockDescriptor",
                  "canonicalReference": "@contract-case/case-example-mock-types!base.AnyMockDescriptor:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/mocks/http/WillReceiveHttpRequest.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "WillReceiveHttpRequest",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/case-example-mock-types!http.WillReceiveHttpRequest:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `WillReceiveHttpRequest` class\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(httpExample: "
                    },
                    {
                      "kind": "Reference",
                      "text": "HttpExample",
                      "canonicalReference": "@contract-case/case-example-mock-types!http.HttpExample:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "httpExample",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/case-example-mock-types!http.WillReceiveHttpRequest#request:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly request: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "request",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/case-example-mock-types!http.WillReceiveHttpRequest#response:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly response: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "response",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/case-example-mock-types!http.WillSendHttpRequest:class",
              "docComment": "/**\n * Defines an example that expects to send an HTTP request. Use this to test HTTP servers.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class WillSendHttpRequest extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMockDescriptor",
                  "canonicalReference": "@contract-case/case-example-mock-types!base.AnyMockDescriptor:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/mocks/http/WillSendHttpRequest.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "WillSendHttpRequest",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/case-example-mock-types!http.WillSendHttpRequest:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `WillSendHttpRequest` class\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(httpExample: "
                    },
                    {
                      "kind": "Reference",
                      "text": "HttpExample",
                      "canonicalReference": "@contract-case/case-example-mock-types!http.HttpExample:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "httpExample",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/case-example-mock-types!http.WillSendHttpRequest#request:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly request: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "request",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/case-example-mock-types!http.WillSendHttpRequest#response:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly response: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "response",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            }
          ]
        }
      ]
    }
  ]
}
