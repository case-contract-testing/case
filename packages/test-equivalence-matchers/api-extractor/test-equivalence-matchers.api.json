{
  "metadata": {
    "toolPackage": "@microsoft/api-extractor",
    "toolVersion": "7.38.0",
    "schemaVersion": 1011,
    "oldestForwardsCompatibleVersion": 1001,
    "tsdocConfig": {
      "$schema": "https://developer.microsoft.com/json-schemas/tsdoc/v0/tsdoc.schema.json",
      "noStandardTags": true,
      "tagDefinitions": [
        {
          "tagName": "@alpha",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@beta",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@defaultValue",
          "syntaxKind": "block"
        },
        {
          "tagName": "@decorator",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@deprecated",
          "syntaxKind": "block"
        },
        {
          "tagName": "@eventProperty",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@example",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@experimental",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@inheritDoc",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@internal",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@label",
          "syntaxKind": "inline"
        },
        {
          "tagName": "@link",
          "syntaxKind": "inline",
          "allowMultiple": true
        },
        {
          "tagName": "@override",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@packageDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@param",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@privateRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@public",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@readonly",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@remarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@returns",
          "syntaxKind": "block"
        },
        {
          "tagName": "@sealed",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@see",
          "syntaxKind": "block"
        },
        {
          "tagName": "@throws",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@typeParam",
          "syntaxKind": "block",
          "allowMultiple": true
        },
        {
          "tagName": "@virtual",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@betaDocumentation",
          "syntaxKind": "modifier"
        },
        {
          "tagName": "@internalRemarks",
          "syntaxKind": "block"
        },
        {
          "tagName": "@preapproved",
          "syntaxKind": "modifier"
        }
      ],
      "supportForTags": {
        "@alpha": true,
        "@beta": true,
        "@defaultValue": true,
        "@decorator": true,
        "@deprecated": true,
        "@eventProperty": true,
        "@example": true,
        "@experimental": true,
        "@inheritDoc": true,
        "@internal": true,
        "@label": true,
        "@link": true,
        "@override": true,
        "@packageDocumentation": true,
        "@param": true,
        "@privateRemarks": true,
        "@public": true,
        "@readonly": true,
        "@remarks": true,
        "@returns": true,
        "@sealed": true,
        "@see": true,
        "@throws": true,
        "@typeParam": true,
        "@virtual": true,
        "@betaDocumentation": true,
        "@internalRemarks": true,
        "@preapproved": true
      },
      "reportUnsupportedHtmlElements": false
    }
  },
  "projectFolderUrl": "https://github.com/case-contract-testing/contract-case/tree/main/packages/case-example-mock-types",
  "kind": "Package",
  "canonicalReference": "@contract-case/test-equivalence-matchers!",
  "docComment": "/**\n * The core ContractCase TestEquivalenceMatchers.\n *\n * @remarks\n *\n * Use these to generalise your tests, avoiding the need to depend on specific data during verification. It's not about defining the whole type system, the idea is that you are saying \"any message that matches this Test Equivalence Matcher is considered covered by this test\".\n *\n * For more information, see {@link https://case.contract-testing.io/docs/defining-contracts/relaxing-tests | the documentation here}\n *\n * @packageDocumentation\n */\n",
  "name": "@contract-case/test-equivalence-matchers",
  "preserveMemberOrder": false,
  "members": [
    {
      "kind": "EntryPoint",
      "canonicalReference": "@contract-case/test-equivalence-matchers!",
      "name": "",
      "preserveMemberOrder": false,
      "members": [
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type",
          "docComment": "/**\n * Represents any matcher, or any json data\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyMatcherOrData = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "AnyMatcherOrData",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "TypeAlias",
          "canonicalReference": "@contract-case/test-equivalence-matchers!AnyStringMatcher:type",
          "docComment": "/**\n * Represents any matcher that resolves to a string, or any string\n *\n * @public\n */\n",
          "excerptTokens": [
            {
              "kind": "Content",
              "text": "export type AnyStringMatcher = "
            },
            {
              "kind": "Content",
              "text": "any"
            },
            {
              "kind": "Content",
              "text": ";"
            }
          ],
          "fileUrlPath": "src/types.ts",
          "releaseTag": "Public",
          "name": "AnyStringMatcher",
          "typeTokenRange": {
            "startIndex": 1,
            "endIndex": 2
          }
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@contract-case/test-equivalence-matchers!arrays:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "arrays",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayContains:class",
              "docComment": "/**\n * Matches an Array which contains elements that match the given matchers - note that two different matchers may be satisfied by the same item in the array.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class ArrayContains extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/arrays/ArrayContains.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ArrayContains",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayContains:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ArrayContains` class\n *\n * @param matchers - any number of matchers, each of which must be found inside the array.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(matchers: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Array",
                      "canonicalReference": "!Array:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "<"
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ">"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "matchers",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 5
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayContains#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayEachEntryMatches:class",
              "docComment": "/**\n * Matches an array where each element matches the provided matcher.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class ArrayEachEntryMatches extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/arrays/ArrayEachEntryMatches.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ArrayEachEntryMatches",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayEachEntryMatches:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ArrayEachEntryMatches` class\n *\n * @param matcher - The matcher for each entry in the array\n *\n * @param example - An optional example of the whole array to return\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(matcher: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "matcher",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayEachEntryMatches#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayEachEntryMatchesWithExample:class",
              "docComment": "/**\n * Matches an array where each element matches the provided matcher.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class ArrayEachEntryMatchesWithExample extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcherWithExample",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcherWithExample:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/arrays/ArrayEachEntryMatchesWithExample.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ArrayEachEntryMatchesWithExample",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayEachEntryMatchesWithExample:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ArrayEachEntryMatchesWithExample` class\n *\n * @param matcher - The matcher for each entry in the array\n *\n * @param example - An optional example of the whole array to return\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(matcher: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ", example: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Array",
                      "canonicalReference": "!Array:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "<"
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ">"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "matcher",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "example",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 7
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayEachEntryMatchesWithExample#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayLength:class",
              "docComment": "/**\n * Matches an Array whose length is within the specified range (or 1-infinity if not specified).\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class ArrayLength extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/arrays/ArrayLength.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ArrayLength",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayLength:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ArrayLength` class\n *\n * @param options - An `ArrayLengthOptions` object with optional minLength (default 1) and maxLength (default infinity) properties.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(options: "
                    },
                    {
                      "kind": "Reference",
                      "text": "ArrayLengthOptions",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayLengthOptions:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "options",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayLength#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayLengthOptions:interface",
              "docComment": "/**\n * Options for the `ArrayLength` matcher\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface ArrayLengthOptions "
                }
              ],
              "fileUrlPath": "src/nodes/arrays/ArrayLength.ts",
              "releaseTag": "Public",
              "name": "ArrayLengthOptions",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayLengthOptions#maxLength:member",
                  "docComment": "/**\n * The maximum length for the array - must be greater than minimum length\n *\n * Default infinity.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly maxLength?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "maxLength",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayLengthOptions#minLength:member",
                  "docComment": "/**\n * The minimum length for the array - must be greater than zero, otherwise empty arrays pass and you wouldn't be testing the array contents.\n *\n * Default 1.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly minLength?: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "minLength",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayStartsWith:class",
              "docComment": "/**\n * Matches an Array which starts with the provided array of matchers - any additional elements in the array are ignored.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class ArrayStartsWith extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/arrays/ArrayStartsWith.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ArrayStartsWith",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayStartsWith:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ArrayStartsWith` class\n *\n * @param matchers - An array of matchers that describes the start of the array. Additional elements in the actual array are ignored.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(matchers: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Array",
                      "canonicalReference": "!Array:interface"
                    },
                    {
                      "kind": "Content",
                      "text": "<"
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ">"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "matchers",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 5
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!arrays.ArrayStartsWith#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@contract-case/test-equivalence-matchers!base:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "base",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class",
              "docComment": "/**\n * The base class for all Test Equivalence Matchers. Extend this if you don't have an example in your Matcher. Otherwise, use {@link @contract-case/test-equivalence-matchers#base.AnyMatcherWithExample}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare abstract class AnyMatcher "
                }
              ],
              "fileUrlPath": "src/nodes/base/AnyMatcher.ts",
              "releaseTag": "Public",
              "isAbstract": true,
              "name": "AnyMatcher",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `AnyMatcher` class\n *\n * @param matcherType - The type string for this matcher (see [Extending ContractCase](https://case.contract-testing.io/docs/advanced-topics/extending-case) for a description of these strings).\n *\n * Matcher strings beginning with `_case:` are reserved for the default ContractCase matchers. Only use a types prefixed with `_case:` if you wish to create a special case for a matching behaviour that is already provided by a core ContractCase matcher.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(matcherType: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "matcherType",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher#toJSON:member(1)",
                  "docComment": "/**\n * Only override this method if you are writing a matcher in a language other than TypeScript.\n *\n * It exists because the ContractCase matcher format is not legal in all languages that ContractCase supports.\n *\n * WARNING: Do not return a string from this method. You must instead return an object that can be serialised to JSON following the matcher format described in [Extending ContractCase](https://case.contract-testing.io/docs/advanced-topics/extending-case).\n *\n * @returns An object in the matcher format described [in the Extending ContractCase documentation](https://case.contract-testing.io/docs/advanced-topics/extending-case).\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcherWithExample:class",
              "docComment": "/**\n * The base class for all Test Equivalence Matchers that have examples provided. Extend this if your matcher knows what the example will be. Otherwise, use {@link @contract-case/test-equivalence-matchers#base.AnyMatcher}\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare abstract class AnyMatcherWithExample extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/base/AnyMatcher.ts",
              "releaseTag": "Public",
              "isAbstract": true,
              "name": "AnyMatcherWithExample",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcherWithExample:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `AnyMatcherWithExample` class\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(matcherType: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ", example: "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "matcherType",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "example",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcherWithExample#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!base.CascadingContextMatcher:class",
              "docComment": "/**\n * This is a passthrough matcher that does nothing except call the child matcher with the current actual data.\n *\n * It's useful for taking advantage of the context cascading available on all matchers without needing to write you own matcher. Extend it if you want to make a matcher that only changes the context object. If you don't know what this means, you don't need to extend this matcher.\n *\n * Due to limitations with JSii, extending implementations MUST NOT override `toJSON`, or MUST return the result of `super.toJSON()` as part of their toJSON method.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare abstract class CascadingContextMatcher extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/base/CascadingContextMatcher.ts",
              "releaseTag": "Public",
              "isAbstract": true,
              "name": "CascadingContextMatcher",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.CascadingContextMatcher:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `CascadingContextMatcher` class\n *\n * @param child - The matcher to apply these context changes to\n *\n * @param contextModifiers - a map of properties to add to the context object\n *\n * @param currentRunModifiers - a map of properties to add to the current run object.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(child: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ", contextModifiers: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Record",
                      "canonicalReference": "!Record:type"
                    },
                    {
                      "kind": "Content",
                      "text": "<string, string>"
                    },
                    {
                      "kind": "Content",
                      "text": ", currentRunModifiers: "
                    },
                    {
                      "kind": "Reference",
                      "text": "Record",
                      "canonicalReference": "!Record:type"
                    },
                    {
                      "kind": "Content",
                      "text": "<string, string>"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "child",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "contextModifiers",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 5
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "currentRunModifiers",
                      "parameterTypeTokenRange": {
                        "startIndex": 6,
                        "endIndex": 8
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.CascadingContextMatcher#toJSON:member(1)",
                  "docComment": "/**\n * If extending this class, do not override this method (or if you do, make sure you call `super.toJSON()`).\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@contract-case/test-equivalence-matchers!convenience:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "convenience",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.And:class",
              "docComment": "/**\n * Matches the content of a variable that comes from a state. See [state definitions](https://case.contract-testing.io/docs/defining-contracts/state-definitions) and [state handlers](https://case.contract-testing.io/docs/reference/state-handlers) for more details.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class And extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/convenience/And.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "And",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.And:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `And` class\n *\n * @param matchers - An array of the matchers to run against this particular spot in the tree\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(matchers: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": "[]"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "matchers",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 3
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.And#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.ChangeLogLevel:class",
              "docComment": "/**\n * Alters the ContractCase log level below this matcher. Useful for debugging.\n *\n * This has no effect on matching.\n *\n * Note that this log level matcher will be saved into the contract, so it will also affect the log level during verification. Usually you will want to remove the use of this matcher before saving the contract.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class ChangeLogLevel extends "
                },
                {
                  "kind": "Reference",
                  "text": "CascadingContextMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.CascadingContextMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/convenience/ChangeLogLevel.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ChangeLogLevel",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.ChangeLogLevel:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ChangeLogLevel` class\n *\n * @param logLevel - The new LogLevel. One of \"none\" | \"error\" | \"warn\" | \"debug\" | \"maintainerDebug\" | \"deepMaintainerDebug\". see [LogLevel](https://case.contract-testing.io/docs/reference/configuring#loglevel-none--error--warn--debug--maintainerdebug) for details\n *\n * @param child - The next matcher in the tree.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(logLevel: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ", child: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "logLevel",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "child",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.ChangeLogLevel#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.NamedMatch:class",
              "docComment": "/**\n * Saves the matcher below it with a unique name that can be used with lookups in tests after this one.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class NamedMatch extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/convenience/NamedMatch.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "NamedMatch",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.NamedMatch:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `NamedMatch` class\n *\n * @param name - The name you can use to lookup this matcher later\n *\n * @param child - The content of this named match. If omitted or undefined, the content will be looked up in a previously named match\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(name: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ", child: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "name",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "child",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.NamedMatch#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.ReferenceMatch:class",
              "docComment": "/**\n * Matches a named matcher created with `NamedMatch`.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class ReferenceMatch extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/convenience/ReferenceMatch.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ReferenceMatch",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.ReferenceMatch:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ReferenceMatch` class\n *\n * @param name - The name you gave to a previous call of `NamedMatch`\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(name: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "name",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.ReferenceMatch#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.StateVariable:class",
              "docComment": "/**\n * Matches the content of a variable that comes from a state. See [state definitions](https://case.contract-testing.io/docs/defining-contracts/state-definitions) and [state handlers](https://case.contract-testing.io/docs/reference/state-handlers) for more details.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class StateVariable extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/convenience/StateVariable.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "StateVariable",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.StateVariable:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `StateVariable` class\n *\n * @param name - The name of the variable\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(name: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "name",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.StateVariable#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.WithExample:class",
              "docComment": "/**\n * Adds an example to the provided matcher. Useful when you have a complicated set of constraints and ContractCase can't figure out what the best example should be.\n *\n * Note that providing any example will override examples provided further down the tree.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class WithExample extends "
                },
                {
                  "kind": "Reference",
                  "text": "CascadingContextMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.CascadingContextMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/convenience/WithExample.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "WithExample",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.WithExample:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `WithExample` class\n *\n * @param matcher - Any matcher to add an example to\n *\n * @param example - The example to use when stripping the matchers\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(matcher: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ", example: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "matcher",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "example",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!convenience.WithExample#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@contract-case/test-equivalence-matchers!http:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "http",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!http.BasicAuthHeaderValue:class",
              "docComment": "/**\n * Matches the value part of a basic auth header with the supplied username and password - useful in conjunction with the StateVariable matcher\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class BasicAuthHeaderValue extends "
                },
                {
                  "kind": "Reference",
                  "text": "StringPrefix",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringPrefix:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/http/BasicAuthHeaderValue.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "BasicAuthHeaderValue",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.BasicAuthHeaderValue:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `BasicAuthHeaderValue` class\n *\n * @param username - The username for this basic auth header\n *\n * @param password - The password for this basic auth password\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(username: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyStringMatcher",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyStringMatcher:type"
                    },
                    {
                      "kind": "Content",
                      "text": ", password: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyStringMatcher",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyStringMatcher:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "username",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "password",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.BasicAuthHeaderValue#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!http.BearerTokenHeaderValue:class",
              "docComment": "/**\n * Matches the value part of a OIDC or OAuth header with the supplied token - useful in conjunction with the StateVariable matcher\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class BearerTokenHeaderValue extends "
                },
                {
                  "kind": "Reference",
                  "text": "StringPrefix",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringPrefix:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/http/BearerTokenHeaderValue.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "BearerTokenHeaderValue",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.BearerTokenHeaderValue:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `BearerTokenHeaderValue` class\n *\n * @param token - A string or string matcher for a Bearer auth token\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(token: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyStringMatcher",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyStringMatcher:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "token",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.BearerTokenHeaderValue#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequest:class",
              "docComment": "/**\n * Matches any HTTP Request with the provided properties\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class HttpRequest extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/http/HttpRequest.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "HttpRequest",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequest:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `HttpRequest` class\n *\n * @param requestExample - An HttpResponseExample that describes the response\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(requestExample: "
                    },
                    {
                      "kind": "Reference",
                      "text": "HttpRequestExample",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequestExample:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "requestExample",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequest#body:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly body?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "body",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequest#headers:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly headers?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "headers",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequest#method:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly method: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyStringMatcher",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyStringMatcher:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "method",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequest#path:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly path: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyStringMatcher",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyStringMatcher:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "path",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequest#query:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly query?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "query",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequest#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequest#uniqueName:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly uniqueName?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "uniqueName",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequestExample:interface",
              "docComment": "/**\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface HttpRequestExample "
                }
              ],
              "fileUrlPath": "src/nodes/http/HttpRequest.ts",
              "releaseTag": "Public",
              "name": "HttpRequestExample",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequestExample#body:member",
                  "docComment": "/**\n * A test equivalence matcher or json object that describes the body for this response. If not provided, no body matching is performed.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly body?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "body",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequestExample#headers:member",
                  "docComment": "/**\n * A Map of header names and associated test-equivalence matcher values accepted by this example. If not provided, no header matching is performed\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly headers?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "headers",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequestExample#method:member",
                  "docComment": "/**\n * A string or string matcher that matches the method used for this example (eg `\"GET\"` or `\"POST\"`). Case insensitive. Note that DELETE, GET and HEAD requests should not have bodies - see the HTTP RFCs for details.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly method: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyStringMatcher",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyStringMatcher:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "method",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequestExample#path:member",
                  "docComment": "/**\n * A string or string matcher that matches the path of this example. Note that any query parameters must be in the query, not in the path.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly path: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyStringMatcher",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyStringMatcher:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "path",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequestExample#query:member",
                  "docComment": "/**\n * A test-equivalence matcher for the query. Usually this is a Map of test-equivalence matchers to match the parsed query string, keyed by parameter name. Repeated parameters are collated and put in an array in this map.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly query?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "query",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpRequestExample#uniqueName:member",
                  "docComment": "/**\n * What unique name, if any, to give to this request\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly uniqueName?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "uniqueName",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponse:class",
              "docComment": "/**\n * Matches any HTTP Response with the provided properties\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class HttpResponse extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/http/HttpResponse.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "HttpResponse",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponse:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `HttpResponse` class\n *\n * @param responseExample - An HttpResponseExample that describes the response\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(responseExample: "
                    },
                    {
                      "kind": "Reference",
                      "text": "HttpResponseExample",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponseExample:interface"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "responseExample",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponse#body:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly body?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "body",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponse#headers:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly headers?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "headers",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponse#status:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly status: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "status",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponse#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                },
                {
                  "kind": "Property",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponse#uniqueName:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly uniqueName?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "uniqueName",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "isStatic": false,
                  "isProtected": false,
                  "isAbstract": false
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Interface",
              "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponseExample:interface",
              "docComment": "/**\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export interface HttpResponseExample "
                }
              ],
              "fileUrlPath": "src/nodes/http/HttpResponse.ts",
              "releaseTag": "Public",
              "name": "HttpResponseExample",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponseExample#body:member",
                  "docComment": "/**\n * A test equivalence matcher or json object that describes the body for this response. If not provided, no body matching is performed.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly body?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "body",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponseExample#headers:member",
                  "docComment": "/**\n * A Map of header names and associated test-equivalence matcher values accepted by this example. If not provided, no header matching is performed\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly headers?: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "headers",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponseExample#status:member",
                  "docComment": "",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly status: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": false,
                  "releaseTag": "Public",
                  "name": "status",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                },
                {
                  "kind": "PropertySignature",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpResponseExample#uniqueName:member",
                  "docComment": "/**\n * What unique name, if any, to give to this response\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "readonly uniqueName?: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isReadonly": true,
                  "isOptional": true,
                  "releaseTag": "Public",
                  "name": "uniqueName",
                  "propertyTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  }
                }
              ],
              "extendsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpStatusCode:class",
              "docComment": "/**\n * Matches an HTTP status code\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class HttpStatusCode extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcherWithExample",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcherWithExample:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/http/HttpStatusCode/HttpStatusCode.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "HttpStatusCode",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpStatusCode:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `HttpStatusCode` class\n *\n * @param statusCode - The http status code to match, expressed as a number or string (eg `200`, `\"404\"` or `\"4XX\"`).\n *\n * Matching can be relaxed with `X`, eg `\"4XX\"` or `\"5XX\"`. This is useful for error handling.\n *\n * If you need to match multiple specific statues, you can provide an array of string or numbers. This behaviour is provided so that you can offer flexibility to the implementation if the code path for multiple status codes is exactly the same. It is not appropriate to use multiple status codes if the code paths are intended to be different. For more context, see [the section on optional values in the documentation](https://case.contract-testing.io/docs/faq#how-do-i-tell-contractcase-that-a-field-is-optional) for more details.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(statusCode: "
                    },
                    {
                      "kind": "Content",
                      "text": "string | string[]"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "statusCode",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.HttpStatusCode#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!http.UriEncodedString:class",
              "docComment": "/**\n * Convenience matcher to treat the string as a uri encoded string - useful in `path` segments.\n *\n * During matching, the actual value is decoded with `decodeUriComponent()` and passed to the child matcher.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class UriEncodedString extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/http/UriEncodedString.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "UriEncodedString",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.UriEncodedString:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `UriEncodedString` class\n *\n * @param child - Any string matcher or literal string\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(child: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyStringMatcher",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyStringMatcher:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "child",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!http.UriEncodedString#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@contract-case/test-equivalence-matchers!modifiers:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "modifiers",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!modifiers.ExactlyLike:class",
              "docComment": "/**\n * Everything inside this matcher will be matched exactly, unless overridden with a generic matcher (eg `AnyString` or` ShapedLike`). Use this to switch out of `shapedLike` and back to the default exact matching.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class ExactlyLike extends "
                },
                {
                  "kind": "Reference",
                  "text": "CascadingContextMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.CascadingContextMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/modifiers/ExactlyLike.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ExactlyLike",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!modifiers.ExactlyLike:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ExactlyLike` class\n *\n * @param content - The object, array, primitive or matcher to match exactly\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(content: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "content",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!modifiers.ExactlyLike#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!modifiers.ShapedLike:class",
              "docComment": "/**\n * Everything inside this matcher will be matched on the shape of the data (ie, type alone), unless overridden with other matchers. Use this to switch out of the default `exactlyLike` matching.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class ShapedLike extends "
                },
                {
                  "kind": "Reference",
                  "text": "CascadingContextMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.CascadingContextMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/modifiers/ShapedLike.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ShapedLike",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!modifiers.ShapedLike:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ShapedLike` class\n *\n * @param content - The object, array, primitive or matcher to match the shape against\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(content: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "content",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!modifiers.ShapedLike#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@contract-case/test-equivalence-matchers!objects:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "objects",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!objects.ObjectEachKeyMatches:class",
              "docComment": "/**\n * Matches an object where each key matches the provided matcher.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class ObjectEachKeyMatches extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/objects/ObjectEachKeyMatches.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ObjectEachKeyMatches",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!objects.ObjectEachKeyMatches:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ObjectEachKeyMatches` class\n *\n * @param matcher - The matcher that all keys must pass\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(matcher: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "matcher",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!objects.ObjectEachKeyMatches#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!objects.ObjectEachValueMatches:class",
              "docComment": "/**\n * Matches an object where each value matches the provided matcher.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class ObjectEachValueMatches extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/objects/ObjectEachValueMatches.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "ObjectEachValueMatches",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!objects.ObjectEachValueMatches:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `ObjectEachValueMatches` class\n *\n * @param matcher - The matcher that all values must pass\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(matcher: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "matcher",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!objects.ObjectEachValueMatches#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@contract-case/test-equivalence-matchers!primitives:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "primitives",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyBoolean:class",
              "docComment": "/**\n * Matches any Boolean.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class AnyBoolean extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcherWithExample",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcherWithExample:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/primitives/AnyBoolean.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "AnyBoolean",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyBoolean:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `AnyBoolean` class\n *\n * @param example - An example boolean\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(example: "
                    },
                    {
                      "kind": "Content",
                      "text": "boolean"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "example",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyBoolean#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyInteger:class",
              "docComment": "/**\n * Matches any whole integer number.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class AnyInteger extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcherWithExample",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcherWithExample:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/primitives/AnyInteger.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "AnyInteger",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyInteger:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `AnyInteger` class\n *\n * @param example - Any floating point number, not infinity, not NaN.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(example: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "example",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyInteger#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyNull:class",
              "docComment": "/**\n * Matches `null` (useful for languages like Java where `body: null` means no body, but you want to match a eg a json document that has the body `\"null\"`).\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class AnyNull extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcherWithExample",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcherWithExample:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/primitives/AnyNull.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "AnyNull",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyNull:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `AnyNull` class\n *\n * @param example - Any floating point number, not infinity, not NaN.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor();"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": []
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyNull#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyNumber:class",
              "docComment": "/**\n * Matches a number following [RFC 8259 JSON](https://www.rfc-editor.org/rfc/rfc8259).\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class AnyNumber extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcherWithExample",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcherWithExample:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/primitives/AnyNumber.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "AnyNumber",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyNumber:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `AnyNumber` class\n *\n * @param example - An example number\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(example: "
                    },
                    {
                      "kind": "Content",
                      "text": "number"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "example",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!primitives.AnyNumber#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            }
          ]
        },
        {
          "kind": "Namespace",
          "canonicalReference": "@contract-case/test-equivalence-matchers!strings:namespace",
          "docComment": "",
          "excerptTokens": [],
          "fileUrlPath": "src/index.ts",
          "releaseTag": "None",
          "name": "strings",
          "preserveMemberOrder": false,
          "members": [
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!strings.AnyString:class",
              "docComment": "/**\n * Matches any string.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class AnyString extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcherWithExample",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcherWithExample:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/strings/AnyString.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "AnyString",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.AnyString:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `AnyString` class\n *\n * @param example - An example string\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(example: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "example",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.AnyString#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!strings.Base64Encoded:class",
              "docComment": "/**\n * Transformation matcher that matches a base64 encoded version of the given string or string matcher\n *\n * WARNING: Since many strings are accidentally decodable as base64, this matcher is best combined with a more restrictive string matcher (eg `StringifiedJson`).\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class Base64Encoded extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/strings/Base64Encoded.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "Base64Encoded",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.Base64Encoded:constructor(1)",
                  "docComment": "/**\n * WARNING: Since many strings are accidentally decodable as base64, this matcher is best combined with a more restrictive string matcher (eg `StringifiedJson`).\n *\n * @param child - The string or string matcher that would match the decoded string\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(child: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "child",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.Base64Encoded#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringContaining:class",
              "docComment": "/**\n * Matches any string that contains the given substring.\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class StringContaining extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcherWithExample",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcherWithExample:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/strings/StringContaining.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "StringContaining",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringContaining:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `StringContaining` class\n *\n * @param substring - The substring that the matcher must contain\n *\n * @param example - An example string that passes this matcher\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(substring: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ", example: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "substring",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "example",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringContaining#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringifiedJson:class",
              "docComment": "/**\n * Transformation matcher that matches a JSON.stringify()ed version of the given object.\n *\n * @example\n *\n * For example, if the actual data is the string:\n * ```\n * \"{\\\"foo\\\":2}\"\n * ```\n *\n * then you could match it with:\n * ```\n * StringifiedJson({\n *   \"foo\": 2\n * })\n * ```\n *\n * or\n * ```\n * StringifiedJson({\n *   \"foo\": AnyNumber(2)\n * })\n * ```\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class StringifiedJson extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/strings/StringifiedJson.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "StringifiedJson",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringifiedJson:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `StringifiedJson` class\n *\n * @param child - The object or matcher that matches the decoded\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(child: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyMatcherOrData",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyMatcherOrData:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "child",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringifiedJson#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringPrefix:class",
              "docComment": "/**\n * Matches any string that begins with the given constant string prefix\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class StringPrefix extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/strings/StringPrefix.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "StringPrefix",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringPrefix:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `StringPrefix` class\n *\n * @param prefix - The prefix string. Must be a string and not a matcher\n *\n * @param suffix - A string or matcher to match against the suffix.\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(prefix: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ", suffix: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyStringMatcher",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyStringMatcher:type"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "prefix",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "suffix",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringPrefix#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            },
            {
              "kind": "Class",
              "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringSuffix:class",
              "docComment": "/**\n * Matches any string that ends with the given constant string suffix\n *\n * @public\n */\n",
              "excerptTokens": [
                {
                  "kind": "Content",
                  "text": "export declare class StringSuffix extends "
                },
                {
                  "kind": "Reference",
                  "text": "AnyMatcher",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!base.AnyMatcher:class"
                },
                {
                  "kind": "Content",
                  "text": " "
                }
              ],
              "fileUrlPath": "src/nodes/strings/StringSuffix.ts",
              "releaseTag": "Public",
              "isAbstract": false,
              "name": "StringSuffix",
              "preserveMemberOrder": false,
              "members": [
                {
                  "kind": "Constructor",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringSuffix:constructor(1)",
                  "docComment": "/**\n * Constructs a new instance of the `StringSuffix` class\n *\n * @param prefix - A string or matcher to match against the prefix. If you don't mind what the prefix is, pass null / undefined\n *\n * @param suffix - The suffix for the matched string. Must be a string and not a matcher\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "constructor(prefix: "
                    },
                    {
                      "kind": "Reference",
                      "text": "AnyStringMatcher",
                      "canonicalReference": "@contract-case/test-equivalence-matchers!AnyStringMatcher:type"
                    },
                    {
                      "kind": "Content",
                      "text": ", suffix: "
                    },
                    {
                      "kind": "Content",
                      "text": "string"
                    },
                    {
                      "kind": "Content",
                      "text": ");"
                    }
                  ],
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [
                    {
                      "parameterName": "prefix",
                      "parameterTypeTokenRange": {
                        "startIndex": 1,
                        "endIndex": 2
                      },
                      "isOptional": false
                    },
                    {
                      "parameterName": "suffix",
                      "parameterTypeTokenRange": {
                        "startIndex": 3,
                        "endIndex": 4
                      },
                      "isOptional": false
                    }
                  ]
                },
                {
                  "kind": "Method",
                  "canonicalReference": "@contract-case/test-equivalence-matchers!strings.StringSuffix#toJSON:member(1)",
                  "docComment": "/**\n * For non-TypeScript implementations (see [AnyMatcher.toJSON()](#\\@case-contract-testing/test-equivalence-matchers.AnyMatcher.toJSON))\n */\n",
                  "excerptTokens": [
                    {
                      "kind": "Content",
                      "text": "toJSON(): "
                    },
                    {
                      "kind": "Content",
                      "text": "unknown"
                    },
                    {
                      "kind": "Content",
                      "text": ";"
                    }
                  ],
                  "isStatic": false,
                  "returnTypeTokenRange": {
                    "startIndex": 1,
                    "endIndex": 2
                  },
                  "releaseTag": "Public",
                  "isProtected": false,
                  "overloadIndex": 1,
                  "parameters": [],
                  "isOptional": false,
                  "isAbstract": false,
                  "name": "toJSON"
                }
              ],
              "extendsTokenRange": {
                "startIndex": 1,
                "endIndex": 2
              },
              "implementsTokenRanges": []
            }
          ]
        }
      ]
    }
  ]
}
